/* eslint-disable max-len */
export default class Timer {
    /**
     * @description generates a new timer object
     * @param {*} seconds amount of seconds to count down from
     * @example
     * const time = new Timer(3600) // 1 hour
     *
     * OR
     *
     * const timeToCountDown = Timer.ConvertToSeconds({
     *  hours: 1,
     *  minutes: 0,
     *  seconds: 0,
     * });
     *
     * const time = new Timer(timeToCountDown);
     */
    constructor(seconds) {
        this.now = Date.now();
        this.then = this.now + (seconds * 1000);

        this.seconds = 1;
        this.minutes = 0;
        this.hours = 0;
    }

    /**
     * @description Convert hours, minutes and seconds into 1 value in seconds
     * @param {Object<int>} timeObject object containing the hours, minutes and seconds
     * @example
     * const timeInSeconds = Timer.ConvertToSeconds({
     *  hours: 0,
     *  minutes: 2,
     *  seconds: 60,
     * })
     *
     * console.log(timeInSeconds); // 180
     * @returns {int} Time in seconds
     */
    static ConvertToSeconds(timeObject) {
        let hours = 0;
        let minutes = 0;
        let seconds = 0;

        if (timeObject.hours) {
            hours = timeObject.hours;
        }

        if (timeObject.minutes) {
            minutes = timeObject.minutes;
        }

        if (timeObject.seconds) {
            seconds = timeObject.seconds;
        }

        const timeInSeconds = Math.floor(hours * 3600) + Math.floor(minutes * 60) + seconds;

        return timeInSeconds;
    }

    /**
     * @description Stop the DisplayFullTime function
     */
    Clear() {
        if (!this.countDown) throw new Error('There is nothing to clear');
        clearInterval(this.countDown);
    }

    /**
     * @description Get the total seconds left in the countdown
     * @example
     * const t = new Timer(60);
     * const secondsLeft = t.Seconds;
     *
     * console.log(secondsLeft); // 60
     */
    get SecondsLeft() {
        return this.seconds % 60;
    }

    /**
     * @description Get the current countdown in seconds
     * @example
     * const t = new Timer(3750);
     * const totalSeconds = t.TotalSeconds;
     *
     * console.log(totalSeconds); // 3750
     */
    get TotalSeconds() {
        return this.seconds;
    }

    set SecondsLeft(seconds) {
        this.seconds = seconds;
    }

    /**
     * @description Get the total hours left in the countdown
     * @example
     * const t = new Timer(3750);
     * const hoursLeft = t.Hours;
     *
     * console.log(hoursLeft); // 1
     */
    get HoursLeft() {
        return Math.floor(this.seconds / 3600) % 60;
    }

    /**
     * @description Get the current countdown in hours
     * @example
     * const t = new Timer(3750);
     * const totalHours = t.TotalHours;
     *
     * console.log(totalHours); // 1
     */
    get TotalHours() {
        return Math.floor(this.seconds / 3600);
    }

    /**
     * @description Get the total minutes left in the countdown
     * @example
     * const t = new Timer(3750);
     * const minutesLeft = t.Minutes;
     *
     * console.log(minutesLeft); // 62
     */
    get MinutesLeft() {
        return Math.floor(this.seconds / 60) % 60;
    }

    /**
     * @description Get the current countdown in minutes
     * @example
     * const t = new Timer(3750);
     * const totalMinutes = t.TotalMinutes;
     *
     * console.log(TotalMinutes); // 62
     */
    get TotalMinutes() {
        return Math.floor(this.seconds / 60);
    }

    /**
     * @description Function will display the full time in hours, minutes and seconds seperated
     * by a < : > once a call
     * @param {element} HTML element with id/class
     * @throws {HTML-Element not found}
     * @example
     *
     * const t = new Timer(3559);
     * t.DisplayFullTimeOnce('timer');
     *
     * 00 : 59 : 59
     */
    DisplayFullTimeOnce(element) {
        this.seconds = Math.round((this.then - Date.now()) / 1000);

        this.hours = Math.floor(this.seconds / 3600) % 60;
        this.minutes = Math.floor(this.seconds / 60) % 60;
        this.remainderSeconds = this.seconds % 60;

        let holder = null;

        if (document.getElementById(element)) {
            holder = document.getElementById(element);
        } else if (document.querySelector(`.${element}`)) {
            holder = document.querySelector(`.${element}`);
        } else {
            return;
            // throw new Error('HTML-Element not found! element parameter must be a valid HTML class/id with a innerHTML option');
        }

        const template = `
            ${this.hours < 10 ? '0' : ''}${this.hours}: 
            ${this.minutes < 10 ? '0' : ''}${this.minutes}: 
            ${this.remainderSeconds < 10 ? '0' : ''}${this.remainderSeconds}
        `;

        holder.innerHTML = template;
    }

    /**
     * @description Function will display the full time in hours, minutes and seconds seperated
     * by a < : >
     * This will also trigger a <countDown> event when finished
     * @param {element} HTML element with id/class
     * @throws {HTML-Element not found}
     * @example
     *
     * const t = new Timer(3559);
     * t.DisplayFullTime('timer');
     *
     * window.addEventListener('countDown', () => {
     *      console.log('finished');
     * });
     *
     * 00 : 59 : 59
     */
    DisplayFullTime(element, event) {
        const timerFinished = new Event(event);

        this.countDown = setInterval(() => {
            this.DisplayFullTimeOnce(element);

            if (this.seconds <= 0) {
                clearInterval(this.countDown);
                this.countDown = null;

                window.dispatchEvent(timerFinished);
            }
        }, 1000);
    }
}
